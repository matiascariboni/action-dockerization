name: Dockerization
description: Composite action to configure Docker, ports, networks and build

inputs:
  IMAGE_ARCH:
    required: true
    description: Target platforms for Docker buildx (e.g., linux/amd64)
  COMPOSE_NAME:
    required: true
    description: Prefix for the compose file name
  ENV_NAME:
    required: true
    description: Environment needed to catch the correct Dockerfile
  CACHE:
    required: false
    description: Enable Docker layer caching for faster builds
    default: 'false'

outputs:
  IMAGE_NAME:
    value: ${{ steps.docker_config.outputs.IMAGE_NAME }}
  COMPOSE_PORTS:
    value: ${{ steps.port_formatter.outputs.COMPOSE_PORTS }}
  COMPOSE_NETWORKS:
    value: ${{ steps.net_formatter.outputs.COMPOSE_NETWORKS }}
  COMPOSE_VOLUMES:
    value: ${{ steps.volume_formatter.outputs.COMPOSE_VOLUMES }}
  COMPOSE_FILE_NAME:
    value: ${{ steps.docker_config.outputs.COMPOSE_FILE_NAME }}

runs:
  using: "composite"
  steps:

    - name: Make scripts executable
      shell: bash
      run: chmod +x ${{ github.action_path }}/scripts/*.sh

    - name: Docker config
      id: docker_config
      shell: bash
      run: ${{ github.action_path }}/scripts/docker_config.sh
      env:
        COMPOSE_NAME: ${{ inputs.COMPOSE_NAME }}
        ENV_NAME: ${{ inputs.ENV_NAME }}

    - name: Ports formatting from Dockerfile
      id: port_formatter
      shell: bash
      run: ${{ github.action_path }}/scripts/port_formatter.sh
      env:
        DOCKERFILE_PATH: ${{ steps.docker_config.outputs.DOCKERFILE_PATH }}

    - name: Network formatting from Dockerfile
      id: net_formatter
      shell: bash
      run: ${{ github.action_path }}/scripts/net_formatter.sh
      env:
        DOCKERFILE_PATH: ${{ steps.docker_config.outputs.DOCKERFILE_PATH }}

    - name: Volume formatting from Dockerfile
      id: volume_formatter
      shell: bash
      run: ${{ github.action_path }}/scripts/volume_formatter.sh
      env:
        DOCKERFILE_PATH: ${{ steps.docker_config.outputs.DOCKERFILE_PATH }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      if: inputs.CACHE == 'true'
      id: cache-docker
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ inputs.ENV_NAME }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-${{ inputs.ENV_NAME }}-
          ${{ runner.os }}-buildx-

    - name: Cache status and recommendations
      if: always()
      shell: bash
      run: |
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "🗂️  DOCKER LAYER CACHE - STATUS & RECOMMENDATIONS"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo ""

        if [ "${{ inputs.CACHE }}" == "true" ]; then
          echo "✅ Docker layer caching is ENABLED"
          echo ""

          # Check cache status
          if [ "${{ steps.cache-docker.outputs.cache-hit }}" == "true" ]; then
            echo "::notice::🎯 Cache Status: EXACT MATCH FOUND"
            echo "   Source: Current commit cache"
            echo "   Result: Maximum speed - all layers will be reused"
          elif [ -d "/tmp/.buildx-cache" ] && [ "$(ls -A /tmp/.buildx-cache 2>/dev/null)" ]; then
            CACHE_SIZE=$(du -sh /tmp/.buildx-cache 2>/dev/null | cut -f1 || echo "unknown")
            echo "::notice::♻️  Cache Status: RESTORED from previous build"
            echo "   Size: $CACHE_SIZE"
            echo "   Result: Unchanged layers will be reused - significant speedup expected"
          else
            echo "::notice::🆕 Cache Status: NOT FOUND (fresh build)"
            echo "   Result: This build will create cache for future runs"
          fi

          echo ""
          echo "📍 Cache location: /tmp/.buildx-cache"
          echo ""
          echo "💡 Recommendation: Set up a scheduled workflow to clean old caches periodically."
          echo "   This prevents cache accumulation and ensures fresh system packages."
          echo "   See documentation for cleanup workflow example."
        else
          echo "::notice::ℹ️  Docker layer caching is DISABLED"
          echo ""
          echo "💡 Consider enabling cache for faster builds!"
          echo ""
          echo "To enable, add this to your workflow:"
          echo "   CACHE: 'true'"
          echo ""
          echo "Benefits:"
          echo "   • 5-7 minutes faster builds (on average)"
          echo "   • Only changed layers are rebuilt"
          echo "   • Significant CI/CD pipeline time savings"
        fi

        echo ""
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

    - name: Build Docker image (with cache)
      if: inputs.CACHE == 'true'
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ${{ steps.docker_config.outputs.DOCKERFILE_PATH }}
        platforms: ${{ inputs.IMAGE_ARCH }}
        tags: ${{ steps.docker_config.outputs.IMAGE_NAME }}:${{ steps.docker_config.outputs.DOCKER_TAG }}
        outputs: type=docker,dest=${{ steps.docker_config.outputs.IMAGE_NAME }}.tar
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

    - name: Build Docker image (without cache)
      if: inputs.CACHE != 'true'
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ${{ steps.docker_config.outputs.DOCKERFILE_PATH }}
        platforms: ${{ inputs.IMAGE_ARCH }}
        tags: ${{ steps.docker_config.outputs.IMAGE_NAME }}:${{ steps.docker_config.outputs.DOCKER_TAG }}
        outputs: type=docker,dest=${{ steps.docker_config.outputs.IMAGE_NAME }}.tar

    - name: Move Docker cache
      if: always() && inputs.CACHE == 'true'
      shell: bash
      run: |
        if [ -d "/tmp/.buildx-cache-new" ]; then
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          echo "✅ Cache moved successfully"
        else
          echo "⚠️  No new cache directory found, skipping move"
        fi